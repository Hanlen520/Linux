#!/usr/bin/env bash
# @File    :   08_manage_file_system.sh
# @Time    :   2019/9/14 19:00
# @Author  :   Crisimple
# @Github :    https://crisimple.github.io/
# @Contact :   Crisimple@foxmail.com
# @License :   (C)Copyright 2017-2019, Micro-Circle
# @Desc    :   None


# 1. 探索文件系统
# 1.1 基本文件系统
#       ext文件系统     --- 索引节点系统在每个物理设备中创建一个单独的表来存储文件信息
#       ext2文件系统    --- 增加了访问文件的大小；将磁盘分组减少碎片化，提高访问速度
# 1.2 日志文件系统
#       ext3文件系统    --- 只将索引节点信息写入日志文件，直到数据块都被成功写入存储设备才删除
#       ext4文件系统    --- Ubuntu的默认文件系统，。区段在存储设备上按块分配空间，但在索引节点表中只保存起始块的位置
#       Reiser文件系统  --- ReiserFS文件系统只支持回写日志模式——只把索引节点表数据写到日志文件
#       JSF文件系统     --- JFS文件系统采用的是有序日志方法，即只在日志中保存索引节点表数据，直到真正的文件数据被写进存储设备时才删除它
#       XFS文件系统     --- XFS文件系统采用回写模式的日志，XFS文件系统还允许在线调整文件系统的大小
# 1.3 写时复制文件系统
#       ZFS文件系统
#       Btrf文件系统


# =============================================================
# 2. 操作文件系统
# 2.1 fdisk创建分区
# fdisk 命令参数的含义：
#       a   设置活动分区标志 "
#       b   编辑BSD Unix系统用的磁盘标签 "
#       c   设置DOS兼容标志 "
#       d   删除分区 "
#       l   显示可用的分区类型"
#       m   显示命令选项"
#       n   添加一个新分区"
#       o   创建DOS分区表"
#       p   显示当前分区表"
#       q   退出，不保存更改"
#       s   为Sun Unix系统创建一个新磁盘标签"
#       t   修改分区的系统ID"
#       u   改变使用的存储单位 "
#       v   验证分区表 "
#       w   将分区表写入磁盘 "
#       x   高级功能 "
# 2.2 创建文件系统
#       mkefs       创建一个ext文件系统
#       mke2fs      创建一个ext2文件系统
#       mkfs.ext3   创建一个ext3文件系统
#       mkfs.ext4   创建一个ext4文件系统
#       mkreiserfs  创建一个ReiserFS文件系统
#       jfs_mkfs    创建一个JFS文件系统
#       mkfs.xfs    创建一个XFS文件系统
#       mkfs.zfs    创建一个ZFS文件系统
#       mkfs.btrfs  创建一个Btrfs文件系统
#       type mkfs.ext4  # 查看某个文件系统是否可用
#       mkdir命令（参见第3章）在虚拟目录中创建了挂载点，mount命令将新的硬盘分区添加到挂载点。
#       mount命令的-t选项指明了要挂载的文件系统类型（ext4）
# 2.3 fsck文件系统的检查与修复
# fsck 命令参数的含义：
#       -a 如果检测到错误，自动修复文件系统
#       -A 检查/etc/fstab文件中列出的所有文件系统
#       -C 给支持进度条功能的文件系统显示一个进度条（只有ext2和ext3）
#       -N 不进行检查，只显示哪些检查会执行
#       -r 出现错误时提示
#       -R 使用-A选项时跳过根文件系统
#       -s 检查多个文件系统时，依次进行检查
#       -t 指定要检查的文件系统类型
#       -T 启动时不显示头部信息
#       -V 在检查时产生详细输出
#       -y 检测到错误时自动修复文件系统


# =============================================================================
# 3. 逻辑卷管理
# 3.1 逻辑卷管理布局
#       硬盘为物理卷PV；多个物理卷形成卷组VG；整个系统的最后一层是逻辑卷LV
# 3.2 Linux 中的 LVM
#       快照：Linux LVM允许你在逻辑卷在线的状态下将其复制到另一个设备
#       条带化：可跨多个物理硬盘 创建逻辑卷
#       镜像：涉及大量数据变动的，镜像是一个实时更新的逻辑卷的完整副本
# 3.3 使用Linux LVM
# (1) 定义物理卷
#       将硬盘上的物理分区转换成Linux LVM使用的物理卷区段，fdisk命令;
#       用分区来创建实际的物理卷，pvcreate命令；
#       查看创建进度的话，用pvdisplay命令
# (2) 创建卷组
#       从命令行创建卷组，需要使用vgcreate命令;
#       看新创建的卷组的细节，可用vgdisplay命令
# (3) 创建逻辑卷
# 要创建逻辑卷，使用lvcreate命令，可配合使用的参数的含义：
#       -c --chunksize 指定快照逻辑卷的单位大小
#       -C --contiguous 设置或重置连续分配策略
#       -i --stripes 指定条带数
#       -I --stripesize 指定每个条带的大小
#       -l --extents 指定分配给新逻辑卷的逻辑区段数，或者要用的逻辑区段的百分比
#       -L --size 指定分配给新逻辑卷的硬盘大小
#       --minor 指定设备的次设备号
#       -m --mirrors 创建逻辑卷镜像
#       -M --persistent 让次设备号一直有效
#       -n --name 指定新逻辑卷的名称
#       -p --permission 为逻辑卷设置读/写权限
#       -r --readahead 设置预读扇区数
#       -R --regionsize 指定将镜像分成多大的区
#       -s snapshot 创建快照逻辑卷
#       -Z --zero 将新逻辑卷的前1 KB数据设置为零
# (4) 创建文件系统
# 运行完lvcreate命令之后，逻辑卷就已经产生了，但它还没有文件系统。你必须使用相应的命令行程序来创建所需要的文件系统。
# (5) 修改 LVM
#       vgchange 激活和禁用卷组
#       vgremove 删除卷组
#       vgextend 将物理卷加到卷组中
#       vgreduce 从卷组中删除物理卷
#       lvextend 增加逻辑卷的大小
#       lvreduce 减小逻辑卷的大小