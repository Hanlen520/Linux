#!/bin/bash
# -*- coding: utf-8 -*-
# by author: Crisimple
# description: 第十一章 构建基本脚本

echo "================================================================================================================="
echo "8.1 使用多条命令"
    echo -en "\t" date ": "; whoami


echo "================================================================================================================="
echo "8.2 创建脚本文件"
    # 如果想在一行显示使用-n参数
    echo -en "\t 现在是北京时间："
    date
    touch file_script.sh
    # chomd u+x file_script.sh


echo "================================================================================================================="
echo "8.3 显示消息"
    echo -e "\t This is a test"
    echo -e "\t It'll start output message"


echo "================================================================================================================="
echo "8.4 使用变量"
    echo -e "\t 8.4.1 环境变量"
    set # 显示活动环境变量的完整列表
    echo "User info for userid: $USER"
    echo UID: $UID
    echo HOME: $HOME

    echo -e "\t 8.4.2 用户变量"
    my_variable="我是一个变量"
    echo ${my_variable}

    echo -e "\t 8.4.3 反引号"
    today=`date +20%y%m%d`
    echo ${today}
    ls /usr/bin -al > test_log.${today}
    rm test_log.*


echo "================================================================================================================="
echo "8.5 重定向输入输出"
    echo -e "\t 8.5.1 输出重定向：命令的输出重定向到一个文件或其他位置上去
                            使用大于号＞（会覆盖之前的内容）；不重写之前的文件内容，如日志记录等使用大于大于号＞＞"
    whoami > inout.txt
    cat inout.txt
    date >> inout.txt
    cat inout.txt


    echo -e "\t 8.5.2 输入重定向：一个文件中的内容重定向到一条命令中去：使用＜；
                                      内置输入重定向＜＜---允许命令行而非文本文件中的重定向输入"
    wc < inout.txt
    # wc命令--对数据中的文本计数：文本的行数；文本的单词数；文本的字节数
    # wc << EOF
    rm inout.txt


echo "================================================================================================================="
echo "8.6 管道--可以将输出重定向到一个命令，此过程称为管道传送，管道符号为|"
#    man echo | less


echo "================================================================================================================="
echo "8.7 数学计算"
    echo -e "\t 8.7.1 expr命令"
    expr 1 + 5
    expr 2 \* 5
    var1=10
    var2=20
    var3=`expr ${var2} / ${var1}`
    echo The result is ${var3}

    echo -e "\t 8.7.2 使用括号"
    var12=$[1 + 6]
    echo ${var12}
    var22=$[${var12} / 2]
    echo ${var22}


    echo -e "\t 8.7.3 浮点解决方案---内置的bash计算器(简称bc)"
    echo -e "\t\t 1.bc的基本知识"
    echo -e "\t\t\t  bc计算器可以识别"
    echo -e "\t\t\t 数字（整数和浮点），也识别变量 "
    echo -e "\t\t\t 变量（简单变量和数组） "
    echo -e "\t\t\t 注释（以英镑开始的行或C语言的/* */对） "
    echo -e "\t\t\t 表达式 "
    echo -e "\t\t\t 编程语句（如if...then语句） "
    echo -e "\t\t\t 函数 "
    # bc
    # bc -q
    # 3.44 / 5
    # 0
    # scale=4
    # 3.44 / 5
    # .6880


    echo -e "\t\t 2.在脚本中使用bc "
    #            var_bc=`echo " scale=4; 3.44 /5 " | bc `
    #            echo The answer is ${var_bc}
    # vara=10.46
    # varb=43.67
    # varc=33.2
    # vard=71.0
    # vare='bc << EOF
    #    scale = 4
    #    a1 = ( ${vara} * ${varb} )
    #    b1 = ( ${varc} * ${vard})
    #    a1 + b1
    #  EOF
    # '
    #  echo ${vare}

echo "================================================================================================================="
echo "8.8 退出脚本--为了向shell表明命令已经处理完成，每条运行在shell中的命令都使用一个退出状态"
    echo -e "\t 8.8.1 核对退出状态--\$?保存最后一条命令执行结束的退出状态"
    date
    echo $?  # 正常退出的状态为0
    sdjsdg
    echo $? # 非正常退出的状态值为非0
    echo -e "\t\t Linux退出状态代码"
    echo -e "\t\t 0-----------命令成功完成"
    echo -e "\t\t 1-----------通常的未知错误"
    echo -e "\t\t 2-----------误用shell命令"
    echo -e "\t\t 126---------命令无法执行"
    echo -e "\t\t 127---------没有找到命令"
    echo -e "\t\t 128+x-------使用Linux信号x的致命错误"
    echo -e "\t\t 130---------使用Ctrl-C终止的命令"
    echo -e "\t\t 255---------规范外的退出状态"


    echo -e "\t 8.8.2 退出命令"
    # 指定一个退出状态exit 5
